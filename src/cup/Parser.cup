// Especificação do parser CUP
package parser;
import java_cup.runtime.*;
//Importar Hashtable
import java.util.Hashtable;

action code
    {:
        private Hashtable<String, Double> environment = new Hashtable<>();
    :}

// Definição dos terminais
terminal            ERROR, SEMI, PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal            UMINUS, LPAREN, RPAREN, ATTRIB;
terminal            SIN, COS, EXP;
terminal String     ID;
terminal Double     NUMBER;

// Definição dos não-terminais
non terminal            expr_list, expr_part;
non terminal Double     expr;

// Precedência e associatividade dos operadores
precedence right ATTRIB;
precedence left  PLUS, MINUS;
precedence left  TIMES, DIVIDE, MOD;
precedence right SIN, COS, EXP;
precedence right ID;


// Regras da gramática

expr_list ::= expr_list expr_part 
    | expr_part
    ;

expr_part ::= ID:id ATTRIB expr:e {: 
        environment.put(id, e); 
        System.out.println(e + " atribuido a " + id); :} SEMI
    | expr:e {: 
        System.out.println("Resultado: " + e); :} SEMI
    | error SEMI
    ;

expr ::= ID:id 
            {: if(environment.containsKey(id)){
                   RESULT = new Double(environment.get(id));
                }else{
                    throw new NullPointerException();
                } :}
    ;

expr ::= EXP expr:e
            {: RESULT = new Double(Math.exp(e)); :}
    | COS expr:e
            {: double rad = Math.toRadians(e);
               RESULT = new Double(Math.cos(rad)); :}
    | SIN expr:e
            {: double rad = Math.toRadians(e);
               RESULT = new Double(Math.sin(rad)); :}
    | expr:e1 PLUS expr:e2 
            {: RESULT = new Double( 
                            e1.doubleValue() + e2.doubleValue()); :}
    | expr:e1 MINUS expr:e2 
            {: RESULT = new Double( 
                            e1.doubleValue() - e2.doubleValue()); :}
    | expr:e1 TIMES expr:e2 
            {: RESULT = new Double( 
                            e1.doubleValue() * e2.doubleValue()); :}
    | expr:e1 DIVIDE expr:e2 
            {: RESULT = new Double( 
                            e1.doubleValue() / e2.doubleValue()); :}
    | expr:e1 MOD expr:e2 
            {: RESULT = new Double( 
                            e1.doubleValue() % e2.doubleValue()); :}
    | NUMBER:n {: RESULT = n; :}
    | MINUS expr:e {: RESULT = 
                        new Double(0 - e.doubleValue()); 
                    :} %prec UMINUS
    | LPAREN expr:e RPAREN {: RESULT = e; :}
    ;



